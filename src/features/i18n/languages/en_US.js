export default {
  bpmn: {
    StartEvent: 'Start Event',
    MessageStartEvent: 'Message Start Event',
    TimerStartEvent: 'Timer Start Event',
    SignalStartEvent: 'Signal Start Event',
    UserTask: 'User Task',
    ServiceTask: 'Service Task',
    ScriptTask: 'Script Task',
    ManualTask: 'Manual Task',
    BusinessRuleTask: 'Business Rule Task',
    SendTask: 'Send Task',
    ReceiveTask: 'Receive Task',
    ParallelGateway: 'Parallel Gateway',
    InclusiveGateway: 'Inclusive Gateway',
    ExclusiveGateway: 'Exclusive Gateway',
    EventBasedGateway: 'Event based Gateway',
    ComplexGateway: 'Complex Gateway',
    IntermediateCatchEvent: 'Intermediate CatchEvent',
    TimerIntermediateCatchEvent: 'Timer Intermediate Catch Event',
    MessageIntermediateCatchEvent: 'Message Intermediate Catch Event',
    SignalIntermediateCatchEvent: 'Signal Intermediate Catch Event',
    IntermediateThrowingEvent: 'Intermediate Throwing Event',
    MessageIntermediateThrowingEvent: 'Message Intermediate Throwing Event',
    SignalIntermediateThrowingEvent: 'Signal Intermediate Throwing Event',
    CompensateIntermediateThrowingEvent:
      'Compensate Intermediate Throwing Event',
    BoundaryEvent: 'Boundary Event',
    CancelBoundaryEvent: 'Cancel Boundary Event',
    CompensateBoundaryEvent: 'Compensate Boundary Event',
    ErrorBoundaryEvent: 'Error Boundary Event',
    MessageBoundaryEvent: 'Message Boundary Event',
    SignalBoundaryEvent: 'Signal Boundary Event',
    TimerBoundaryEvent: 'Timer Boundary Event',
    CallActivity: 'Call Activity',
    SubProcess: 'SubProcess',
    Transaction: 'Transaction',
    TextAnnotation: 'TextAnnotation',
    HorizontalPool: 'HorizontalPool',
    HorizontalLane: 'HorizontalLane',
    VerticalPool: 'VerticalPool',
    VerticalLane: 'VerticalLane',
    EndEvent: 'End Event',
    TerminateEndEvent: 'Terminate End Event',
    MessageEndEvent: 'Message End Event',
    SignalEndEvent: 'Signal End Event',
    ErrorEndEvent: 'Error End Event',
    CancelEndEvent: 'Cancel End Event',
    CompensateEndEvent: 'Compensate End Event'
  }
}
